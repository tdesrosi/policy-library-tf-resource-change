# Copyright 2019 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: tfgcpiamallowbanrolesconstraintv1
spec:
  crd:
    spec:
      names:
        kind: TFGCPIAMAllowBanRolesConstraintV1
      validation:
        openAPIV3Schema:
          properties:
            mode:
              description: "Enforcement mode, defaults to allow"
              type: string
              enum: [denylist, allowlist]
            roles:
              description: "Roles to be allowed or banned
                ex. roles/owner; Wildcards (*) supported"
              type: array
              items:
                type: string
  targets:
    - target: validation.resourcechange.terraform.cloud.google.com
      rego: |
        #INLINE("validator/iam_allow_ban_roles.rego")
        #
        # Copyright 2022 Google LLC
        #
        # Licensed under the Apache License, Version 2.0 (the "License");
        # you may not use this file except in compliance with the License.
        # You may obtain a copy of the License at
        #
        #      http://www.apache.org/licenses/LICENSE-2.0
        #
        # Unless required by applicable law or agreed to in writing, software
        # distributed under the License is distributed on an "AS IS" BASIS,
        # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        # See the License for the specific language governing permissions and
        # limitations under the License.
        #
        
        package templates.gcp.TFGCPIAMAllowBanRolesConstraintV1
        
        violation[{
        	"msg": message,
        	"details": metadata,
        }] {
        	# NOTE: For Terraform review object, the following schema is followed:
        	# review: {
        	# 	change: {
        	# 		actions: ["create"],
        	# 		after: {
        	#			condition: []
        	#			members: []
        	#			project:
        	# 			role: 
        	# 		}
        	# 	},
        	# 	mode:
        	# 	name: 
        	# 	provider_name:
        	# 	type:
        	# }
        
        	# Updating Gatekeeper format for Terraform Resource Changes, v1beta1
        	params := input.parameters
        
        	# Use input.review for TF changes (see schema above)
        	resource := input.review
        
        	resource.type == "google_project_iam_binding"
        
        	not resource.change.actions[0] == "delete"
        
        	# Get the role to be binded (ie. roles/resourcemanager.projectIamAdmin)
        	role := resource.change.after.role
        
        	matches_found = [r | r := config_pattern(role); glob.match(params.roles[_], [], r)]
        
        	mode := object.get(params, "mode", "allowlist")
        
        	target_match_count(mode, desired_count)
        	count(matches_found) != desired_count
        
        	message := output_msg(desired_count, resource.name, role)
        
        	metadata := {
        		"resource": resource.name,
        		"role": role,
        	}
        }
        
        ###########################
        # Rule Utilities
        ###########################
        
        # Determine the overlap between matches under test and constraint
        target_match_count(mode) = 0 {
        	mode == "denylist"
        }
        
        target_match_count(mode) = 1 {
        	mode == "allowlist"
        }
        
        # Output message based on type of violation
        output_msg(0, asset_name, role) = msg {
        	msg := sprintf("%v is in the banned list of IAM policy for %v", [role, asset_name])
        }
        
        output_msg(1, asset_name, role) = msg {
        	msg := sprintf("%v is NOT in the allowed list of IAM policy for %v", [role, asset_name])
        }
        
        # If the member in constraint is written as a single "*", turn it into super
        # glob "**". Otherwise, we won't be able to match everything.
        config_pattern(old_pattern) = "**" {
        	old_pattern == "*"
        }
        
        config_pattern(old_pattern) = old_pattern {
        	old_pattern != "*"
        }
        #ENDINLINE
